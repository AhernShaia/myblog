<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AI 協作框架 - crewai</title>
    <link href="/2024/04/18/AI-%E5%8D%94%E4%BD%9C/"/>
    <url>/2024/04/18/AI-%E5%8D%94%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>最近在研究 AI 的領域，突然靈機一動！與其讓單一 AI 獨自應付各種難題，不如組建一支 AI 團隊，讓每個 AI 各司其職，集思廣益!</p><p>想象一下，如果只有一個 AI，當它遇到自己不擅長的領域時，只能硬著頭皮瞎編一通。但如果有整支 AI 團隊，每個成員都是某個領域的專家，團隊就能通力合作，補足彼此的短板，最終給出高品質的解決方案。</p><p>很酷的是，我發現了一款叫 CrewAI 的框架，可以輕鬆打造這樣的 AI 團隊。更贊的是，它還能與本地部署的大型 AI 模型(比如 OllAMa)互動，不用總是去找遠在雲端的 AI 服務，既省錢又快速!</p><p>用 AI 團隊的方式問答和解決問題，隊友們互幫互補，必定事半功倍，我認為 AI 團隊這樣的架構有望顯著提升問答、任務解決等應用的效果，為人機交互帶來全新的體驗…</p><p>馬上開始～</p><p>套件 GitHub：<a href="https://github.com/joaomdmoura/crewAI?tab=readme-ov-file"><strong>crewai</strong></a><br>Demo GitHub：<a href="https://github.com/AhernShaia/crewai_demo.git"><strong>crewai_demo</strong></a></p><h5 id="操作環境"><a href="#操作環境" class="headerlink" title="操作環境"></a>操作環境</h5><ul><li>電腦：macbook pro 14</li><li>套件管理：poetry</li><li>編輯器：VSCode</li><li>Python 版本：3.13</li><li>LLM: yabi&#x2F;breeze-7b-instruct-v1_0_q6_k</li></ul><h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">poetry add crewai crewai-tools<br></code></pre></td></tr></table></figure><h3 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h3><p>在程式碼中，定義了兩個角色<code>Senior Research Analyst</code>和<code>Tech Content Strategist</code>，分別賦予了各自的角色定位，並且給該角色的目標，給予協作<code>allow_delegation</code>，然後給角色任務<code>task1</code>和<code>task2</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> crewai <span class="hljs-keyword">import</span> Agent, Task, Crew, Process<br><span class="hljs-keyword">from</span> crewai_tools <span class="hljs-keyword">import</span> SerperDevTool<br>os.environ[<span class="hljs-string">&quot;OPENAI_API_BASE&quot;</span>] = <span class="hljs-string">&#x27;http://localhost:11434/v1&#x27;</span><br>os.environ[<span class="hljs-string">&quot;OPENAI_MODEL_NAME&quot;</span>] = <span class="hljs-string">&#x27;yabi/breeze-7b-instruct-v1_0_q6_k&#x27;</span><br>os.environ[<span class="hljs-string">&quot;OPENAI_API_KEY&quot;</span>] = <span class="hljs-string">&#x27;sk-111111111111111111111111111111111111111111111111&#x27;</span><br><br>search_tool = SerperDevTool(<br>    name=<span class="hljs-string">&quot;Search the internet&quot;</span>, search_url=<span class="hljs-string">&quot;https://buzzorange.com/techorange/latest&quot;</span>,    description=<span class="hljs-string">&quot;A tool that can be used to seman&quot;</span>,<br>)<br><br>researcher = Agent(<br>    role=<span class="hljs-string">&#x27;Senior Research Analyst&#x27;</span>,<br>    goal=<span class="hljs-string">&#x27;發現人工智慧和數據科學的前沿發展&#x27;</span>,<br>    backstory=<span class="hljs-string">&quot;&quot;&quot;您在一家領先的科技智庫工作。</span><br><span class="hljs-string">   您的專長在於識別新興趨勢。</span><br><span class="hljs-string">   您擁有剖析複雜數據並提出可行見解的技巧。&quot;&quot;&quot;</span>,<br>    verbose=<span class="hljs-literal">True</span>,<br>    allow_delegation=<span class="hljs-literal">True</span>,<br>)<br>writer = Agent(<br>    role=<span class="hljs-string">&#x27;Tech Content Strategist&#x27;</span>,<br>    goal=<span class="hljs-string">&#x27;製作有關技術進步的引人注目的內容&#x27;</span>,<br>    backstory=<span class="hljs-string">&quot;&quot;&quot;您是一位著名的內容策略師，以富有洞察力和引人入勝的文章而聞名。</span><br><span class="hljs-string">   您將複雜的概念轉化為引人入勝的敘述。&quot;&quot;&quot;</span>,<br>    verbose=<span class="hljs-literal">True</span>,<br>    allow_delegation=<span class="hljs-literal">True</span><br>)<br><br><span class="hljs-comment"># 建立任務給Agent</span><br>task1 = Task(<br>    description=<span class="hljs-string">&quot;&quot;&quot;對2024年人工智慧最新進展進行全面分析。</span><br><span class="hljs-string">   確定關鍵趨勢、突破性技術和潛在的行業影響。&quot;&quot;&quot;</span>,<br>    expected_output=<span class="hljs-string">&quot;完整的分析報告要點&quot;</span>,<br>    agent=researcher<br>)<br><br>task2 = Task(<br>    description=<span class="hljs-string">&quot;&quot;&quot;利用提供的見解，開發一個引人入勝的博客</span><br><span class="hljs-string">   這篇文章強調了最重要的人工智慧進步。</span><br><span class="hljs-string">   您的貼文應該內容豐富且易於理解，適合精通科技的受眾。</span><br><span class="hljs-string">   讓它聽起來很酷，避免使用複雜的單詞，這樣聽起來就不像人工智慧&quot;&quot;&quot;</span>,<br>    expected_output=<span class="hljs-string">&quot;完整的部落格文章至少有 4 段&quot;</span>,<br>    agent=writer<br>)<br><br><span class="hljs-comment"># 參與協作的Agent和任務</span><br>crew = Crew(<br>    agents=[researcher, writer],<br>    tasks=[task1, task2],<br>    verbose=<span class="hljs-number">2</span>,<br>)<br><br>result = crew.kickoff()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;######################&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><p><img src="/./img/crewai_demo.png"></p>]]></content>
    
    
    <categories>
      
      <category>技術研究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GAI</tag>
      
      <tag>RAG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Line Bot</title>
    <link href="/2024/04/17/GAI/LineBot/line-bot/"/>
    <url>/2024/04/17/GAI/LineBot/line-bot/</url>
    
    <content type="html"><![CDATA[<p>這篇文章，我們會做以下事情：</p><ol><li>建立 Channel</li><li>確認 Channel 的 <code>Channel secret</code>和<code>Channel access token</code></li><li>啟動後端服務</li><li>開通外網</li><li>呼叫 API 測試</li></ol><h5 id="操作環境"><a href="#操作環境" class="headerlink" title="操作環境"></a>操作環境</h5><ul><li>電腦：macbook pro 14</li><li>編輯器：VSCode</li></ul><h3 id="一-建立-Channel"><a href="#一-建立-Channel" class="headerlink" title="(一)建立 Channel"></a>(一)建立 Channel</h3><h4 id="1-申請-Messaging-API-網站連結"><a href="#1-申請-Messaging-API-網站連結" class="headerlink" title="1. 申請 Messaging API (網站連結)"></a>1. 申請 Messaging API (<a href="https://developers.line.biz/en/services/messaging-api/">網站連結</a>)</h4><ul><li>進入網站，點選 <code>[Start now] </code></li></ul><p><img src="/./img/Line_Bot/line_bot_index_page.png"></p><ul><li><p>點選<code>Create a new channel</code>。</p><p><img src="/./img/Line_Bot/create_channel.png"></p></li><li><p>在彈出的視窗中選擇<code>Messaging API</code></p><p><img src="/./img/Line_Bot/create_channel_2.png"></p></li></ul><blockquote><p>將表單的內容填完後點擊 Create 就可以建立 Line Bot 囉，要呼叫 <code>Messaging API</code> 就必須要有<strong>Channel</strong>的<code>Channel secret</code>和<code>Channel access token</code>。</p></blockquote><h3 id="二-確認-Channel-的-Channel-secret和Channel-access-token"><a href="#二-確認-Channel-的-Channel-secret和Channel-access-token" class="headerlink" title="(二)確認 Channel 的 Channel secret和Channel access token"></a>(二)確認 Channel 的 <code>Channel secret</code>和<code>Channel access token</code></h3><p>在建立完<code>Channel</code>之後，頁面會跳轉到<code>Channel</code>的資訊頁，然後，我們要找到<code>Channel secret</code>和<code>Channel access token</code>。</p><p><img src="/./img/Line_Bot/channel_info.png"></p><ol><li><p>Channel secret<br>在 <strong>Basic settings</strong> 這個選項頁，將網頁拉至下方。<br><img src="/./img/Line_Bot/channel_secret.png"></p></li><li><p>Channel access token<br>點擊<code>Messaging API</code>(<strong>Basic settings</strong>的右邊)，將網頁拉至下方會看到<code>Channel access token</code>。</p><blockquote><p><strong>Channel</strong> 剛建立的時候需要點擊 <strong>Issue</strong> 生成 Token。</p></blockquote><p><img src="/./img/Line_Bot/channel_token.png"></p></li></ol><h3 id="三-啟動後端服務"><a href="#三-啟動後端服務" class="headerlink" title="(三)啟動後端服務"></a>(三)啟動後端服務</h3><p>使用官方提供的範例：<a href="https://github.com/line/line-bot-sdk-python"><strong>line-bot-sdk-python</strong></a><br>在官方提供範例中使用了 <strong>flask 框架</strong>，我們會從建立 python 虛擬環境開始，安裝套件和範例解說，並且使用<code>Ngrok</code>開放網路，最後在 Line Bot 上測試。</p><h4 id="1-建立虛擬環境"><a href="#1-建立虛擬環境" class="headerlink" title="1. 建立虛擬環境"></a>1. 建立虛擬環境</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python3 -m [套件名] [自行命名環境名稱]</span><br>python3 -m venv venv<br></code></pre></td></tr></table></figure><h4 id="2-啟動虛擬環境"><a href="#2-啟動虛擬環境" class="headerlink" title="2. 啟動虛擬環境"></a>2. 啟動虛擬環境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> venv/bin/activate<br></code></pre></td></tr></table></figure><h4 id="3-安裝套件"><a href="#3-安裝套件" class="headerlink" title="3. 安裝套件"></a>3. 安裝套件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install line-bot-sdk flask<br></code></pre></td></tr></table></figure><h4 id="4-建立-python-執行程式"><a href="#4-建立-python-執行程式" class="headerlink" title="4. 建立 python 執行程式"></a>4. 建立 python 執行程式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">app.py<br></code></pre></td></tr></table></figure><h4 id="5-將以下程式碼貼到app-py裡，這個範例程式會將用戶輸入的內容同步返回，也就是輸入什麼內容，Line-Bot-就會回覆一樣內容。"><a href="#5-將以下程式碼貼到app-py裡，這個範例程式會將用戶輸入的內容同步返回，也就是輸入什麼內容，Line-Bot-就會回覆一樣內容。" class="headerlink" title="5. 將以下程式碼貼到app.py裡，這個範例程式會將用戶輸入的內容同步返回，也就是輸入什麼內容，Line Bot 就會回覆一樣內容。"></a>5. 將以下程式碼貼到<code>app.py</code>裡，這個範例程式會將用戶輸入的內容同步返回，也就是輸入什麼內容，Line Bot 就會回覆一樣內容。</h4><p>需要更改的有：</p><ul><li><strong>YOUR_CHANNEL_ACCESS_TOKEN</strong>：換成你建立 Channel 的 <code>Channel access token</code></li><li><strong>YOUR_CHANNEL_SECRET</strong>：換成你建立 Channel 的 <code>Channel secret</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, abort<br><br><span class="hljs-keyword">from</span> linebot.v3 <span class="hljs-keyword">import</span> (<br>    WebhookHandler<br>)<br><span class="hljs-keyword">from</span> linebot.v3.exceptions <span class="hljs-keyword">import</span> (<br>    InvalidSignatureError<br>)<br><span class="hljs-keyword">from</span> linebot.v3.messaging <span class="hljs-keyword">import</span> (<br>    Configuration,<br>    ApiClient,<br>    MessagingApi,<br>    ReplyMessageRequest,<br>    TextMessage<br>)<br><span class="hljs-keyword">from</span> linebot.v3.webhooks <span class="hljs-keyword">import</span> (<br>    MessageEvent,<br>    TextMessageContent<br>)<br><br>app = Flask(__name__)<br><span class="hljs-comment"># 這裡需要修改</span><br>configuration = Configuration(access_token=<span class="hljs-string">&#x27;YOUR_CHANNEL_ACCESS_TOKEN&#x27;</span>)<br>handler = WebhookHandler(<span class="hljs-string">&#x27;YOUR_CHANNEL_SECRET&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/callback&quot;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">callback</span>():<br>    <span class="hljs-comment"># get X-Line-Signature header value</span><br>    signature = request.headers[<span class="hljs-string">&#x27;X-Line-Signature&#x27;</span>]<br><br>    <span class="hljs-comment"># get request body as text</span><br>    body = request.get_data(as_text=<span class="hljs-literal">True</span>)<br>    app.logger.info(<span class="hljs-string">&quot;Request body: &quot;</span> + body)<br><br>    <span class="hljs-comment"># handle webhook body</span><br>    <span class="hljs-keyword">try</span>:<br>        handler.handle(body, signature)<br>    <span class="hljs-keyword">except</span> InvalidSignatureError:<br>        app.logger.info(<span class="hljs-string">&quot;Invalid signature. Please check your channel access token/channel secret.&quot;</span>)<br>        abort(<span class="hljs-number">400</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;OK&#x27;</span><br><br><br><span class="hljs-meta">@handler.add(<span class="hljs-params">MessageEvent, message=TextMessageContent</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_message</span>(<span class="hljs-params">event</span>):<br>    <span class="hljs-keyword">with</span> ApiClient(configuration) <span class="hljs-keyword">as</span> api_client:<br>        line_bot_api = MessagingApi(api_client)<br>        line_bot_api.reply_message_with_http_info(<br>            ReplyMessageRequest(<br>                reply_token=event.reply_token,<br>                messages=[TextMessage(text=event.message.text)]<br>            )<br>        )<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h4 id="6-啟動-flask-預設是-5000-Port。"><a href="#6-啟動-flask-預設是-5000-Port。" class="headerlink" title="6. 啟動 flask,預設是 5000 Port。"></a>6. 啟動 flask,預設是 5000 Port。</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python app.py<br></code></pre></td></tr></table></figure><p><img src="/./img/Line_Bot/run_flask_server.png"></p><h3 id="四-開通外網"><a href="#四-開通外網" class="headerlink" title="(四)開通外網"></a>(四)開通外網</h3><p>到目前為止，已經將後端服務準備好了，再來就是將電腦的網路開放，並且將 Line Bot 呼叫的請求送到後端服務處理。</p><ol><li>安裝<a href="https://ngrok.com/download">Ngrok</a>，根據自己操作的電腦系統選擇安裝。</li><li>開發端口，根據後端服務啟動的端口開放。<br>我 flask 啟動的 port 是 5000，所以開放的是 5000 port。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ngrok [協議] [Server port]</span><br>ngrok http 5000<br></code></pre></td></tr></table></figure><p>啟動畫面<br><img src="/./img/Line_Bot/start_ngrok.png"><br>瀏覽器輸入或直接複製終端上的網址也可以，進入頁面之後，就會出現你的外部網址。</p><p><a href="http://127.0.0.1:4040/"><strong>http://127.0.0.1:4040</strong></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://127.0.0.1:4040<br></code></pre></td></tr></table></figure><h3 id="五-呼叫-API-測試"><a href="#五-呼叫-API-測試" class="headerlink" title="(五)呼叫 API 測試"></a>(五)呼叫 API 測試</h3><p>到了最後的環節，讓 Line Bot 能夠和你的後端服務溝通。</p><ol><li>回到 Line Bot 你建立的 Channel 頁面，點選 <code>Messaging API</code>，頁面向下移動，找到<code>Webhook settings</code>，開啟<code>Use webhook</code>(<strong>重要</strong>)選項。<br><img src="/./img/Line_Bot/line-bot-webhook.png"></li><li>將你的 <strong>Ngrok 網址</strong> 貼至<code>Webhook URL</code>後，再加上<code>/callback</code>（<strong>重要</strong>），點擊<code>Update</code>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Ngrok URL/callback<br></code></pre></td></tr></table></figure><ol start="3"><li><p>點擊<code>Verify</code>測試連線，出現<em>Success</em>代表連線成功了。<br><img src="/./img/Line_Bot/line-bot-connect-success.png"></p><blockquote><p>如果連線失敗，可以由以下幾點做排查：</p><ul><li><p>確認 程式碼 <code>Channel access token</code> 和 <code>Channel secret</code> 是否和建立的 <em>Channel</em> 一致。</p></li><li><p>確認 開放的 Ngrok 網址是否有貼錯，有沒有加上&#x2F;callback。</p></li><li><p>flask 是否有啟動，啟動的 Port 是否和 Ngrok 開放的 Port 有沒有一致。</p></li></ul></blockquote></li><li><p>加入 Line Bot 好友，發送消息。<br>在 <code>Messaging API</code>頁面中，有個 QR code 可以掃描加入 Line 好友。<br><img src="/./img/Line_Bot/line-bot-qrcode.png"><br><img src="/./img/Line_Bot/line_result.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>實作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Line Bot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Personal projects - 法務助手</title>
    <link href="/2024/04/17/GAI/Personal-projects-1/"/>
    <url>/2024/04/17/GAI/Personal-projects-1/</url>
    
    <content type="html"><![CDATA[<h2 id="實戰說明"><a href="#實戰說明" class="headerlink" title="實戰說明"></a>實戰說明</h2><p><strong>目的</strong>：實作 RAG 架構，透過詢問 LLM 獲得法律協助。</p><p>簡單說明專案流程，將本地的檔案轉換成向量資料並且儲存在免費的雲端向量資料庫 Qdrant，Line Bot 作為前端，透過對話的方式向 AI 助手詢問，LLM 則使用 Azure 部署的 OpenAI model，將結果回覆給使用者。</p><p>最後將服務部署在 GCP <strong><code>App Engine</code></strong> 。</p><p>Git Hub 連結：<a href="https://github.com/AhernShaia/legaladvisor--Line-"><strong>legaladvisor</strong></a></p><h3 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h3><ul><li>開發環境：macbook pro 14</li><li>前端: Line Bot</li><li>後端: Flask</li><li>向量資料庫: Qdrant</li><li>通用模型：<a href="https://learn.microsoft.com/zh-tw/azure/ai-services/openai/concepts/models">gpt-4-32k</a></li><li>Embeddings：<a href="https://learn.microsoft.com/zh-tw/azure/ai-services/openai/concepts/models">text-embedding-ada-002</a></li><li>雲服務: GAE, Qdrant Cloud, Azure OpenAI</li></ul><hr><h1 id="正式開始"><a href="#正式開始" class="headerlink" title="正式開始"></a>正式開始</h1><p>(一) <a href="../LineBot/line-bot.md">建立 Line Bot</a></p>]]></content>
    
    
    <categories>
      
      <category>實作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GAI</tag>
      
      <tag>RAG</tag>
      
      <tag>Personal projects</tag>
      
      <tag>Line Bot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RAG(Retrieval Augmented Generation)</title>
    <link href="/2024/04/17/GAI/RAG/"/>
    <url>/2024/04/17/GAI/RAG/</url>
    
    <content type="html"><![CDATA[<h4 id="什麼是-RAG-Retrieval-Augmented-Generation"><a href="#什麼是-RAG-Retrieval-Augmented-Generation" class="headerlink" title="什麼是 RAG(Retrieval Augmented Generation)?"></a>什麼是 RAG(Retrieval Augmented Generation)?</h4><p>RAG 是一種自然語言處理技術,旨在提高生成式語言模型的效能和輸出品質。這項技術結合了檢索和生成兩大功能,在生成文本時可以參考<strong>指定的知識庫或語料</strong>,從而產生更準確、更富內容的輸出。<br><code>舉個例子：圖書館與管理員，圖書館相當於資料庫，LLM 則是管理員，用戶透過和管理員詢問，由管理員查找，並找出所需要的資料給用戶。</code></p><h4 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h4><p>將檢索和生成兩個步驟整合到一個統一的框架中。在生成階段,語言模型會分析輸入的問題或提示,並與知識庫中的文本進行相似度匹配,檢索出與主題相關的片段。接著語言模型會綜合這些檢索結果和原始提示,生成最終的輸出文本。</p><h5 id="RAG-運作方式"><a href="#RAG-運作方式" class="headerlink" title="RAG 運作方式"></a>RAG 運作方式</h5><ol><li><p>Load：讀取檔案（資料來源）。</p></li><li><p>Split：將讀取的內容進行切割。</p></li><li><p>Store：將分割後的內容進行轉換 Embedding，儲存到向量資料庫。</p><p><img src="https://python.langchain.com/assets/images/rag_indexing-8160f90a90a33253d0154659cf7d453f.png" alt="Indexing"></p><blockquote><p>圖片來源：<a href="https://python.langchain.com/docs/use_cases/question_answering/#rag-architecture">Langchain - Q&amp;A with RAG</a></p></blockquote></li></ol><h6 id="（二）檢索-Retrieval-和生成-Generation"><a href="#（二）檢索-Retrieval-和生成-Generation" class="headerlink" title="（二）檢索(Retrieval)和生成(Generation)"></a>（二）檢索(Retrieval)和生成(Generation)</h6><ol><li><p>Retrieve：使用者輸入，使用 Retriever 從儲存體中擷取相關的分割 。</p></li><li><p>Generate：ChatModel &#x2F; LLM 使用包含問題和檢索到的資料的提示產生答案。</p><p><img src="https://python.langchain.com/assets/images/rag_retrieval_generation-1046a4668d6bb08786ef73c56d4f228a.png" alt="Retrieve&amp;Generate"></p><blockquote><p>圖片來源：<a href="https://python.langchain.com/docs/use_cases/question_answering/#rag-architecture">Langchain - Q&amp;A with RAG</a></p></blockquote></li></ol><h4 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h4><ol><li><strong>客制的知識庫</strong>：RAG 架構能夠充分利用現有的大量文本資料,從中檢索出與當前問題相關的片段,有效提高了知識的利用率。</li><li><strong>生成高品質回答</strong>：通過將檢索到的相關文本與大型語言模型相結合,RAG 架構能夠生成連貫、富含細節的高品質回答。</li><li><strong>可解釋性強</strong>： 由於回答是基於已檢索的文本片段生成,因此 RAG 架構的回答具有很好的可解釋性,可以追溯到原始文本證據(有依據的回答)。</li><li><strong>隨時更新資料</strong>：當有新的資料需要提供給使用者時，只需要將資料來源轉換即可。</li></ol><h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4><ol><li><strong>檢索品質和 LLM 影響生成結果</strong>： 生成品質在很大程度上依賴於檢索模組的表現，如果檢索出的相關文本不足或不準確,將會影響最終的生成質量，且 LLM 也會影響最終結果。</li><li><strong>上下文理解有限</strong>： 雖然讀解模組對文本片段進行了轉換,但對於 <em><strong>長文檔</strong></em> 或 <em><strong>跨多個文檔</strong></em> 的上下文理解能力仍有限制。</li><li><strong>遺漏文本外知識</strong>： RAG 架構主要依賴語料庫中的文本知識,對於一些常識性的知識或者是隱性知識的獲取和利用能力較弱，如果超出資料範圍，反而會導致<strong>幻覺</strong>的發生。</li></ol><hr><p>總體來說,RAG 架構權衡了檢索和生成的優勢,是一種非常實用的知識密集型對話系統架構,但也存在一些局限性,需要根據具體場景酌情選擇和優化。</p><p>雖然目前仍有一些缺陷有待克服,但相信未來會有多種解決方案彌補這些不足,讓 RAG 技術大放異彩。</p>]]></content>
    
    
    <categories>
      
      <category>學習筆記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GAI</tag>
      
      <tag>RAG</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
